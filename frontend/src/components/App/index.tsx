/* eslint-disable react/no-unknown-property */
import React, { useCallback, useEffect, useState } from 'react';
import { Routes, Route, useLocation } from 'react-router-dom';
import {
  ActionIcon,
  Anchor,
  AppShell,
  Burger,
  Flex,
  LoadingOverlay,
  Menu,
  Space,
  Title,
  useComputedColorScheme,
  useMantineColorScheme,
  useMantineTheme,
} from '@mantine/core';
import { useDispatch } from 'react-redux';
import {
  IconBrightness,
  IconLayoutSidebarLeftCollapse,
  IconLayoutSidebarLeftExpand,
  IconUserCircle,
} from '@tabler/icons-react';
import { useDisclosure } from '@mantine/hooks';

import { AppDispatch } from '../../store';
import { updatePath } from '../../slices/App';
import { PathNavLinks } from './PathNavLinks';
import { Home } from '../Home';

// Start of app import code generated by oxgen. DO NOT EDIT.
// End of app import code generated by oxgen. DO NOT EDIT.

export const App = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [opened, { toggle }] = useDisclosure();
  const [collapsed, setCollapsed] = useState<boolean>(false);
  const location = useLocation();
  const theme = useMantineTheme();

  useEffect(() => {
    const collapsedState = localStorage.getItem('collapsedState');

    if (collapsedState && collapsedState === 'true') {
      setCollapsed(true);
    }
  }, []);

  const toggleSidebar = useCallback(() => {
    localStorage.setItem('collapsedState', collapsed ? 'false' : 'true');
    setCollapsed(!collapsed);
  }, [collapsed]);

  const { toggleColorScheme } = useMantineColorScheme();
  const computedColorScheme = useComputedColorScheme('light', {
    getInitialValueInEffect: true,
  });

  useEffect(() => {
    dispatch(updatePath(location.pathname));
  }, [dispatch, location]);

  return (
    <div>
      <AppShell
        header={{ height: 64 }}
        navbar={{
          width: collapsed ? 80 : 300,
          breakpoint: 'sm',
          collapsed: { mobile: !opened },
        }}
        styles={thisTheme => ({
          main: {
            backgroundColor:
              computedColorScheme === 'dark'
                ? thisTheme.colors.dark[8]
                : thisTheme.colors.gray[0],
          },
        })}
      >
        <AppShell.Header
          h={{ base: 40, md: 64 }}
          px={{ base: 'xs', md: 'md' }}
          py={{ base: '0px', md: 'md' }}
        >
          <div
            style={{ display: 'flex', alignItems: 'center', height: '100%' }}
          >
            <Flex
              align="center"
              direction="row"
              wrap="wrap"
              style={{ width: '100%' }}
            >
              <Burger
                opened={opened}
                onClick={toggle}
                hiddenFrom="sm"
                size="xs"
                color={theme.colors.gray[6]}
                mr="xl"
              />
              <Anchor
                c={computedColorScheme === 'dark' ? 'white' : 'dark'}
                href="/#/"
              >
                <Title order={3}>scenes</Title>
              </Anchor>

              <Space style={{ flex: 1 }} w="sm" />

              <Menu shadow="md" width={200}>
                <Menu.Target>
                  <ActionIcon
                    c={computedColorScheme === 'dark' ? 'white' : 'dark'}
                  >
                    <IconUserCircle strokeWidth={1} size={24} />
                  </ActionIcon>
                </Menu.Target>

                <Menu.Dropdown>
                  <Menu.Item
                    leftSection={<IconBrightness strokeWidth={1} size={14} />}
                    onClick={() => toggleColorScheme()}
                  >
                    Toggle dark mode
                  </Menu.Item>
                </Menu.Dropdown>
              </Menu>
            </Flex>
          </div>
        </AppShell.Header>
        <AppShell.Navbar p="md" hidden={!opened} w={collapsed ? 80 : 300}>
          <Flex justify={collapsed ? 'center' : 'flex-end'}>
            <ActionIcon onClick={toggleSidebar}>
              {collapsed ? (
                <IconLayoutSidebarLeftExpand stroke={1} />
              ) : (
                <IconLayoutSidebarLeftCollapse stroke={1} />
              )}
            </ActionIcon>
          </Flex>
          <Space h="lg" />
          <PathNavLinks collapsed={collapsed} toggleNav={toggle} />
        </AppShell.Navbar>
        <AppShell.Main>
          <Routes>
            <Route index element={<Home />} />
            {/* Start of app route code generated by oxgen. DO NOT EDIT. */}
            {/* End of app route code generated by oxgen. DO NOT EDIT. */}
          </Routes>
        </AppShell.Main>
      </AppShell>
      <LoadingOverlay visible={false} />
    </div>
  );
};
